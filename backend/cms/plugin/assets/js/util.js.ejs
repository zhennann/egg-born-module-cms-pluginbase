const _createPromise = function(handler) {
  let resolved = false;
  let rejected = false;
  let resolveArgs;
  let rejectArgs;
  const promiseHandlers = {
    then: undefined,
    catch: undefined,
  };
  const promise = {
    then(thenHandler) {
      if (resolved) {
        thenHandler(...resolveArgs);
      } else {
        promiseHandlers.then = thenHandler;
      }
      return promise;
    },
    catch(catchHandler) {
      if (rejected) {
        catchHandler(...rejectArgs);
      } else {
        promiseHandlers.catch = catchHandler;
      }
      return promise;
    },
  };

  function resolve(...args) {
    resolved = true;
    if (promiseHandlers.then) promiseHandlers.then(...args);
    else resolveArgs = args;
  }
  function reject(...args) {
    rejected = true;
    if (promiseHandlers.catch) promiseHandlers.catch(...args);
    else rejectArgs = args;
  }
  handler(resolve, reject);

  return promise;
};

const _formatDateTime = function(date, fmt) { // author: meizz
  const o = {
    'M+': date.getMonth() + 1, // 月份
    'd+': date.getDate(), // 日
    'h+': date.getHours(), // 小时
    'm+': date.getMinutes(), // 分
    's+': date.getSeconds(), // 秒
    'q+': Math.floor((date.getMonth() + 3) / 3), // 季度
    S: date.getMilliseconds(), // 毫秒
  };
  if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
  for (const k in o) { if (new RegExp('(' + k + ')').test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length))); }
  return fmt;
};

const util = {
  now() {
    return this.formatDateTime(null);
  },
  today() {
    return this.formatDateTime(null, 'yyyy-MM-dd');
  },
  formatDateTime(date, fmt) {
    date = date || new Date();
    if (typeof (date) !== 'object') date = new Date(date);
    fmt = fmt || 'yyyy-MM-dd hh:mm:ss';
    return _formatDateTime(date, fmt);
  },
  formatDate(date, sep) {
    sep = sep || '-';
    return this.formatDateTime(date, `yyyy${sep}MM${sep}dd`);
  },
  formatTime(date, sep) {
    sep = sep || ':';
    return this.formatDateTime(date, `hh${sep}mm${sep}ss`);
  },
  parseUrlQuery(url) {
    const query = {};
    let urlToParse = url || window.location.href;
    let i;
    let params;
    let param;
    let length;
    if (typeof urlToParse === 'string' && urlToParse.length) {
      urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\S*\?/, '') : '';
      params = urlToParse.split('&');
      length = params.length;

      for (let i = 0; i < length; i += 1) {
        param = params[i].replace(/#\S+/g, '').split('=');
        query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';
      }
    }
    return query;
  },
  promise(handler) {
    return window.Promise ? new Promise(handler) : _createPromise(handler);
  },
  url(path) {
    return `${env.site.rootUrl}/${path}`;
  },
  ajax({ url, body, cache = true }) {
    return this.promise((resolve, reject) => {
      $.ajax({
        type: 'GET',
        cache,
        url: `<%=site.serverUrl%>/api${url}`,
        data: body,
        dataType: 'jsonp',
        timeout: 7000,
      }).done(function(data) {
        if (data.code === 0) {
          resolve(data.data);
        } else {
          reject(data.message);
        }
      }).fail(function() {
        reject(null);
      });
    });
  },
  combineImageUrl(url, width, height) {
    if (!url) return url;
    if (url.indexOf('/api/a/file/file/download') === -1) return url;
    if (!width && !height) return url;
    const pixelRatio = window.devicePixelRatio || 1;
    let query = '';
    if (width) query = `width=${parseInt(width) * pixelRatio}`;
    if (height) query = `${query ? query + '&' : ''}height=${parseInt(height) * pixelRatio}`;
    return `${url}${url.charAt(url.length - 1) === '?' ? '' : '?'}${query}`;
  },
  loadMore({ container, threshold = 50, index = 0, onFetch, onParse }) {
    // init
    const $container = $(container);
    const $window = $(window);
    const $body = $('body');

    const $loadMoreContainer = $('<div class="load-more"></div>');
    $loadMoreContainer.insertAfter($container);

    //
    let finished = false;
    let fetching = false;
    let error = false;

    // onFetch
    const _onFetch = function() {
      fetching = true;
      $loadMoreContainer.empty();
      $loadMoreContainer.append($('<span class="glyphicon glyphicon-refresh spinning"></span>'));
      const res = onFetch({ index });
      res.then(data => {
        $loadMoreContainer.empty();
        index = data.index;
        finished = data.finished;
        for (let i = 0; i < data.list.length; i++) {
          $container.append($(onParse(data.list[i])));
        }
        error = false;
        fetching = false;
      }).catch(() => {
        const $buttonTry = $('<button type="button" class="btn btn-warning btn-xs"><%=text("Load error, try again")%></button>');
        $buttonTry.click(() => {
          _onFetch();
        });
        $loadMoreContainer.empty();
        $loadMoreContainer.append($buttonTry);
        // need retry manually
        error = true;
        fetching = false;
      });
    };
    // onScroll
    const _onScroll = function() {
      if (finished || fetching || error) return;
      if (($body.outerHeight() - $window.height() - $window.scrollTop()) < threshold) {
        _onFetch();
      }
    };

    // bind event
    $window.on('scroll.infinite resize.infinite', _onScroll);
    _onScroll();
  },
  echo() {
    return this.ajax({
      url: '/a/base/auth/echo',
    }).then(data => {
      this.user = data;
      this.stats();
    });
  },
  stats() {
    const stats = $('.stat');
    const atomIds = [];
    $.each(stats, (index, item) => {
      const $item = $(item);
      if (!$item.hasClass('no-parse')) {
        atomIds.push($item.data('article-id'));
      }
    });
    if (atomIds.length === 0) return;
    this.ajax({
      url: '/a/base/atom/stats',
      body: {
        data: JSON.stringify(atomIds),
      },
    }).then(atoms => {
      this.setStats(atoms);
    });
  },
  setStats(atoms) {
    for (const atom of atoms) {
      const atomId = atom.atomId;
      // stat
      const $stat = $(`.stat[data-article-id=${atomId}]`);
      // num
      $('.num.readCount', $stat).text(atom.readCount);
      $('.num.commentCount', $stat).text(atom.commentCount);
      this.starCount(atomId, atom.star, atom.starCount);
      // click
      $('.button-starCount', $stat).click(() => {
        this.starClick(atomId);
      });
    }
  },
  starClick(atomId) {
    // stat
    const $stat = $(`.stat[data-article-id=${atomId}]`);
    const star = $('.button-starCount .star-on', $stat).hasClass('hidden') ? 1 : 0;
    const data = {
      key: { atomId },
      atom: { star },
    };
    this.ajax({
      url: '/a/base/atom/star',
      body: {
        data: JSON.stringify(data),
      },
    }).then(data => {
      this.starCount(atomId, data.star, data.starCount);
    });
  },
  starCount(atomId, star, starCount) {
    const $stat = $(`.stat[data-article-id=${atomId}]`);
    $('.num.starCount', $stat).text(starCount);
    if (star) {
      $('.button-starCount .star-on').removeClass('hidden');
      $('.button-starCount .star-off').addClass('hidden');
    } else {
      $('.button-starCount .star-on').addClass('hidden');
      $('.button-starCount .star-off').removeClass('hidden');
    }
  },
  read(){

  },
};
