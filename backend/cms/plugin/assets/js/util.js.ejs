const _createPromise = function(handler) {
  let resolved = false;
  let rejected = false;
  let resolveArgs;
  let rejectArgs;
  const promiseHandlers = {
    then: undefined,
    catch: undefined,
  };
  const promise = {
    then(thenHandler) {
      if (resolved) {
        thenHandler(...resolveArgs);
      } else {
        promiseHandlers.then = thenHandler;
      }
      return promise;
    },
    catch(catchHandler) {
      if (rejected) {
        catchHandler(...rejectArgs);
      } else {
        promiseHandlers.catch = catchHandler;
      }
      return promise;
    },
  };

  function resolve(...args) {
    resolved = true;
    if (promiseHandlers.then) promiseHandlers.then(...args);
    else resolveArgs = args;
  }
  function reject(...args) {
    rejected = true;
    if (promiseHandlers.catch) promiseHandlers.catch(...args);
    else rejectArgs = args;
  }
  handler(resolve, reject);

  return promise;
};

const _formatDateTime = function(date, fmt) { // original author: meizz
  const o = {
    'M+': date.getMonth() + 1, // month
    'D+': date.getDate(), // day
    'H+': date.getHours(), // hour
    'm+': date.getMinutes(), // minute
    's+': date.getSeconds(), // second
    'Q+': Math.floor((date.getMonth() + 3) / 3), // quarter
    S: date.getMilliseconds(), // millisecond
  };
  if (/(Y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
  for (const k in o) { if (new RegExp('(' + k + ')').test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length))); }
  return fmt;
};

const _time = {
  now() {
    return this.formatDateTime(null);
  },
  today() {
    return this.formatDate(null);
  },
  formatDateTime(date, fmt) {
    date = date || new Date();
    if (typeof (date) !== 'object') date = new Date(date);
    fmt = fmt || 'YYYY-MM-DD HH:mm:ss';
    return _formatDateTime(date, fmt);
  },
  formatDate(date, sep) {
    sep = sep || '-';
    return this.formatDateTime(date, `YYYY${sep}MM${sep}DD`);
  },
  formatTime(date, sep) {
    sep = sep || ':';
    return this.formatDateTime(date, `HH${sep}mm${sep}ss`);
  },
};

const util = {
  time: _time,
  formatDateTime(date) {
    return this.time.formatDateTime(date, `${env.format.date} ${env.format.time}`);
  },
  parseUrlQuery(url) {
    const query = {};
    let urlToParse = url || window.location.href;
    let i;
    let params;
    let param;
    let length;
    if (typeof urlToParse === 'string' && urlToParse.length) {
      urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\S*\?/, '') : '';
      params = urlToParse.split('&');
      length = params.length;

      for (let i = 0; i < length; i += 1) {
        param = params[i].replace(/#\S+/g, '').split('=');
        query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';
      }
    }
    return query;
  },
  promise(handler) {
    return window.Promise ? new Promise(handler) : _createPromise(handler);
  },
  rootUrl(language) {
    language = language || env.language.current;
    return `${env.site.rawRootUrl}${language === env.language.default ? '' : '/' + language}`;
  },
  url(path, language) {
    const urlRoot = this.rootUrl(language);
    return path ? `${urlRoot}/${path}` : urlRoot;
  },
  ajax({ url, body, cache = true }) {
    return this.promise((resolve, reject) => {
      $.ajax({
        type: 'GET',
        cache,
        url: `<%=site.serverUrl%>/api${url}`,
        data: body,
        dataType: 'jsonp',
        timeout: 7000,
      }).done(function(data) {
        if (data.code === 0) {
          resolve(data.data);
        } else {
          reject(data.message);
        }
      }).fail(function() {
        reject(null);
      });
    });
  },
  combineImageUrl(url, width, height) {
    if (!url) return this.url('plugins/cms-pluginbase/assets/images/avatar_user.png');
    if (url.indexOf('/api/a/file/file/download') === -1) return url;
    if (!width && !height) return url;
    const pixelRatio = window.devicePixelRatio || 1;
    let query = '';
    if (width) query = `width=${parseInt(width) * pixelRatio}`;
    if (height) query = `${query ? query + '&' : ''}height=${parseInt(height) * pixelRatio}`;
    return `${url}${url.charAt(url.length - 1) === '?' ? '' : '?'}${query}`;
  },
  loadMore({ container, threshold = 100, index = 0, context, onFetch, onParse }) {
    // init
    const $container = $(container);
    const $window = $(window);
    const $body = $('body');

    const $loadMoreContainer = $('<div class="load-more"></div>');
    $loadMoreContainer.insertAfter($container);

    //
    let finished = false;
    let fetching = false;
    let error = false;

    // onFetch
    const _onFetch = function() {
      fetching = true;
      $loadMoreContainer.empty();
      $loadMoreContainer.append($('<span class="glyphicon glyphicon-refresh spinning"></span>'));
      const res = onFetch({ index, context });
      res.then(data => {
        //
        $loadMoreContainer.empty();
        if (!data.finished) {
          const $buttonMore = $('<button type="button" class="btn btn-warning btn-xs"><%=text("Load More")%></button>');
          $buttonMore.click(() => {
            _onFetch();
          });
          $loadMoreContainer.append($buttonMore);
        }
        //
        index = data.index;
        finished = data.finished;
        for (let i = 0; i < data.list.length; i++) {
          $container.append($(onParse(data.list[i])));
        }
        error = false;
        fetching = false;
      }).catch(err => {
        console.log(err);
        const $buttonTry = $('<button type="button" class="btn btn-warning btn-xs"><%=text("Load error, try again")%></button>');
        $buttonTry.click(() => {
          _onFetch();
        });
        $loadMoreContainer.empty();
        $loadMoreContainer.append($buttonTry);
        // need retry manually
        error = true;
        fetching = false;
      });
    };
    // onScroll
    const _onScroll = function() {
      if (finished || fetching || error) return;
      if (($body.outerHeight() - $window.height() - $window.scrollTop()) < threshold) {
        _onFetch();
      }
    };

    // fetchOrScroll
    const _fetchOrScroll = function() {
      if (index === 0) {
        _onFetch();
      } else {
        _onScroll();
      }
    };

    // bind event
    $window.on('scroll.infinite resize.infinite', _onScroll);
    _fetchOrScroll();

    // controller
    const _controller = {
      reload(ops) {
        // check if fetching
        if (fetching) return false;
        // reset
        index = ops.index;
        context = ops.context;
        finished = false;
        error = false;
        // empty
        $container.empty();
        // load
        _fetchOrScroll();
        // ok
        return true;
      },
    };

    return _controller;
  },
};

$(document).ready(function() {
  // img delay
  $.each($('.img-delay'), (index, item) => {
    const $item = $(item);
    const src = $item.data('src');
    const width = $item.data('width');
    const height = $item.data('height');
    $item.attr('src', util.combineImageUrl(src, width, height));
    $(item).removeClass('img-delay');
  });
});

